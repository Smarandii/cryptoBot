from telebot import TeleBot
from buttons import *
from currency import *
from secrets import *
from database import *
from functions import *
from datetime import datetime

bot = TeleBot(TOKEN)
u_menu = UserMenu()
o_menu = OperatorMenu()
a_menu = AdminMenu()
c_menu = CryptoMenu()
p_menu = PersonalMenu()
curr = CurrencyBot()

global OPERATORS, ADMINS
OPERATORS = get_operators_list()
ADMINS = get_admins_list()
create_connection('database.db')
conn = sqlite3.connect('database.db')
create_table(conn, 'users')
create_table(conn, 'requests')
conn.close()


def send_request_to_operators(text, request):
    rq_id = request[0]
    if 'help_request' not in request[3]:
        operator_buttons = keyboard_maker(2, ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª'],
                                          [f'confirm {rq_id}', f'cancel {rq_id}'])

    else:
        operator_buttons = keyboard_maker(2, ['–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å'],
                                          [f'answer {rq_id}', f'cancel_question {rq_id}'])
    for operator in OPERATORS:
        bot.send_message(operator, text=text,
                         reply_markup=operator_buttons)


def show_all_requests_to_operators(requests):
    for request in requests:
        text = get_request_text(request)
        send_request_to_operators(text=text, request=request)


def check_user_is_follower(user_id):
    group_status = bot.get_chat_member(chat_id=GROUP, user_id=user_id)
    channel = bot.get_chat_member(chat_id=CHANNEL, user_id=user_id)
    if "'status': 'left'" in str(group_status):
        if "'status': 'left'" in str(channel):
            return 0
    return 1


def add_new_user(c, msg):
    user_id = msg.chat.id
    follow_status = check_user_is_follower(user_id)
    invited_by = get_invitation(msg.text)
    user = add_new_user_to_db(c, user_id, follow_status, invited_by)
    return user


@bot.message_handler(content_types=['sticker', 'file', 'photo', 'video', 'audio'])
def msg_analyzer(msg):
    user_id = msg.chat.id
    markup = u_menu.get_start_menu_markup()
    bot.send_message(user_id,
                     text="‚¨áÔ∏è–ú–µ–Ω—é",
                     reply_markup=markup)


@bot.message_handler(commands=['user'])
def change_menu(msg):
    chat_id = msg.chat.id
    markup = u_menu.get_start_menu_markup()
    bot.send_message(chat_id, "–ú–µ–Ω—é ‚¨áÔ∏è", reply_markup=markup)


@bot.message_handler(commands=['operator'])
def operator_menu(msg):
    chat_id = msg.chat.id
    if str(chat_id) in OPERATORS or str(chat_id) in ADMINS:
        markup = o_menu.get_menu_markup()
        bot.send_message(chat_id, "–ú–µ–Ω—é ‚¨áÔ∏è", reply_markup=markup)


@bot.message_handler(commands=['admin'])
def admin_menu(msg):
    chat_id = msg.chat.id
    if str(chat_id) in ADMINS:
        markup = a_menu.get_menu_markup()
        bot.send_message(chat_id, "–ú–µ–Ω—é ‚¨áÔ∏è", reply_markup=markup)


@bot.message_handler(commands=['addadmin'])
def add_a(msg):
    user_id = msg.chat.id
    if " " in msg.text and (str(user_id) in ADMINS):
        command, admin_id = msg.text.split(" ")
        add_admin(admin_id)
        bot.send_message(msg.chat.id,
                         text='–ù–æ–≤—ã–π –∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')


@bot.message_handler(commands=['addoper'])
def add_o(msg):
    user_id = msg.chat.id
    if " " in msg.text and (str(user_id) in ADMINS):
        command, operator_id = msg.text.split(" ")
        add_operator(operator_id)
        bot.send_message(msg.chat.id,
                         text='–ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')


@bot.message_handler(commands=['deloper'])
def del_o(msg):
    user_id = msg.chat.id
    if " " in msg.text and (str(user_id) in ADMINS):
        command, operator_id = msg.text.split(" ")
        delete_operator(operator_id)
        bot.send_message(msg.chat.id,
                         text='–û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')


@bot.message_handler(commands=['deladmin'])
def del_a(msg):
    user_id = msg.chat.id
    if " " in msg.text and (str(user_id) in ADMINS):
        command, admin_id = msg.text.split(" ")
        delete_admin(admin_id)
        bot.send_message(msg.chat.id,
                         text='–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')


@bot.message_handler(commands=['refresh'])
def refresh(msg):
    OPERATORS = get_operators_list()
    ADMINS = get_admins_list()
    bot.send_message(msg.chat.id,
                     text='–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')


@bot.message_handler(commands=['start'])
def start_menu(msg):
    c = sqlite3.connect('database.db')
    user_id = msg.chat.id
    user = add_new_user(c, msg)
    print(user)

    if check_user_is_follower(user_id):
        markup = u_menu.get_start_menu_markup()
        bot.send_message(user_id, "‚¨áÔ∏è–ú–µ–Ω—é", reply_markup=markup)
    else:
        markup = u_menu.suggestion_menu()
        bot.send_message(user_id, "‚ùì –ï—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ?\n"
                                  "üìà –ê –∑—Ä—è! –í—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏–º—Å—è - –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±–º–µ–Ω–∞.", reply_markup=markup)
        markup = u_menu.get_start_menu_markup()
        bot.send_message(user_id, "‚¨áÔ∏è–ú–µ–Ω—é", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def msg_analyzer(msg):
    c = sqlite3.connect('database.db')
    user_id = msg.chat.id
    user = add_new_user(c, msg)

    check_requests_shell_life(c)
    trade_request, help_request, replenish_request, service_request, return_request = get_requests(c, user_id)
    print(trade_request, 'found trade')
    print(help_request, 'found help')
    print(replenish_request, 'found replenish')
    print(service_request, 'found service')
    print(return_request, 'found return')

    if u_menu.sent_by_start_menu(msg.text):
        # User menu
        if '–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É' in msg.text:
            markup = c_menu.get_menu_markup()
            bot.send_message(user_id, text="‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", reply_markup=markup)

        if "–ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞ üë•" in msg.text:
            text = get_partnership_text(c, user_id)
            bot.send_message(user_id, text=text)

        if "–ü–æ–º–æ—â—å üÜò" in msg.text:
            request = get_request_by_telegram_id(c, user_id, rq_type='help_request')
            if request is not None:
                bot.send_message(chat_id=user_id,
                                 text='–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞–º –≤–æ–ø—Ä–æ—Å, –∂–µ–ª–∞–µ—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?',
                                 reply_markup=SHOW_OR_CANCEL_HELP_ORDER)
            else:
                request = add_request_to_db(c, [user_id, 'H: wait_for_question',
                                                f'help_request', str(datetime.now()), 'None', 'None'])
                bot.send_message(user_id,
                                 text="–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º, –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫-—Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ–º!", )
                print(request)

        if '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' in msg.text:
            bot.send_message(user_id, text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', reply_markup=p_menu.get_menu_markup())
            return True

    elif p_menu.sent_by_menu(msg.text):
        if "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" in msg.text:
            select_all_requests(c)
            bot.send_message(user_id,
                             text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å: {user[2]} —Ä—É–±.\n",
                             reply_markup=REPLENISH_BALANCE)

        if '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å' in msg.text:
            bot.send_message(user_id, text=f"–í—ã {user[3]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å: {user[2]} —Ä—É–±.\n",
                             reply_markup=RETURN_MONEY)

        if '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in msg.text:
            markup = u_menu.get_start_menu_markup()
            bot.send_message(user_id, text="‚¨áÔ∏è –ú–µ–Ω—é", reply_markup=markup)

    elif c_menu.sent_by_menu(msg.text):
        # Get Crypto menu
        if "(" in msg.text:
            # If crypto chosen
            key, iso_code = msg.text.split(" ")
            curr.update_all_currencies()
            curr_price = curr.get_curr_by_key(key)

            if trade_request is not None and trade_request[2] != 'user_confirmed':
                bot.send_message(chat_id=user_id,
                                 text='–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, –∂–µ–ª–∞–µ—Ç–µ –µ—ë –æ—Ç–º–µ–Ω–∏—Ç—å?',
                                 reply_markup=SHOW_OR_CANCEL_TRADE_ORDER)
            else:
                bot.send_message(chat_id=user_id,
                                 text=f'üí∞–í–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ {key}\n'
                                      f'–ù–∞–ø—Ä–∏–º–µ—Ä: {EXAMPLE[key]}',
                                 reply_markup=CANCEL_ORDER)
                request = add_request_to_db(c, [user_id, "T: wait for trade value",
                                                f'trade {key} {curr_price}', str(datetime.now()), 'None', 'None'])
                print(request, 'added')

        if '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in msg.text:
            markup = u_menu.get_start_menu_markup()
            bot.send_message(user_id, text="‚¨áÔ∏è –ú–µ–Ω—é", reply_markup=markup)

    elif o_menu.sent_by_menu(msg.text) and (str(user_id) in OPERATORS or str(user_id) in ADMINS):
        # Operator menu
        if "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏" in msg.text:
            requests = get_all_requests_in_list(c)
            show_all_requests_to_operators(requests)
            if not requests:
                bot.send_message(user_id,
                                 text='–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return True

        elif '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in msg.text:
            add_request_to_db(c, [user_id, 'S: wait_for_user_replenish',
                                  f'service_request', str(datetime.now()), 'None', 'None'])
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "
                                           "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n"
                                           "–í–æ—Ç —Ç–∞–∫:\n"
                                           "id amount")
            return True

        elif '–°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in msg.text:
            add_request_to_db(c, [user_id, 'S: wait_for_user_unreplenish',
                                  f'service_request', str(datetime.now()), 'None', 'None'])
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "
                                           "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —Å–Ω—è—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n"
                                           "–í–æ—Ç —Ç–∞–∫:\n"
                                           "id amount")
            return True

        elif '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' in msg.text:
            add_request_to_db(c, [user_id, 'S: wait_for_msg',
                                  f'service_request', str(datetime.now()), 'None', 'None'])
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "
                                           "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n"
                                           "–í–æ—Ç —Ç–∞–∫:\n"
                                           "id message")
            return True

        elif '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é' in msg.text:
            markup = u_menu.get_start_menu_markup()
            bot.send_message(user_id, text="‚¨áÔ∏è –ú–µ–Ω—é", reply_markup=markup)
            return True

    elif a_menu.sent_by_menu(msg.text) and user_id in ADMINS:
        if '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞' in msg.text:
            bot.send_message(user_id, text="–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /addoper")
        if '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞' in msg.text:
            bot.send_message(user_id, text="–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /addadmin")
        if '–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞' in msg.text:
            bot.send_message(user_id, text="–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /deloper")
        if '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞' in msg.text:
            bot.send_message(user_id, text="–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /deladmin")

    else:
        if all_requests_is_none(c, user_id):
            markup = u_menu.get_start_menu_markup()
            bot.send_message(user_id, "‚¨áÔ∏è–ú–µ–Ω—é", reply_markup=markup)
        if return_request is not None:
            request = return_request
            if return_request[2] == "R: wait for return value":
                return_value = get_value(msg.text)

                if float(user[2]) > return_value and return_value_is_acceptable(return_value):
                    request[5] = f"–í—ã–≤–æ–¥ {return_value}"
                    update_request_in_db(c, request)
                    choose_return_keyboard = keyboard_maker(2, ['–°–±–µ—Ä–±–∞–Ω–∫', 'QIWI'],
                                                            [f'return_sber {return_request[0]}',
                                                             f'return_qiwi {return_request[0]}'])
                    bot.send_message(user_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ–Ω—å–≥–∏',
                                     reply_markup=choose_return_keyboard)
                else:
                    bot.send_message(
                        text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.\n–ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n'
                             f'–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {get_balance_available_for_return(user)} —Ä—É–±.\n'
                             f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_VALUE_FOR_RETURN}\n'
                             f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MAX_VALUE_FOR_RETURN}\n',
                        chat_id=user_id)
                    delete_request_from_db(c, request_id=request[0])
            if return_request[2] == "R: wait for return requisites":
                user_requisites = msg.text
                request[6] = user_requisites
                if request is not None:
                    update_request_in_db(c, request)
                bot.send_message(user_id,
                                 text=f'–î–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞:\n'
                                      f'{user_requisites}',
                                 reply_markup=REQUISITES_CONFIRM_KEYBOARD)
            return True
        if service_request is not None:
            # service operations
            request = service_request
            if request[2] == "S: wait_for_answer":
                answer = msg.text
                send_msg_to_user = keyboard_maker(2, ['–î–∞',
                                                      '–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ'],
                                                  [f'sendanswer {request[1]} {answer}',
                                                   f'answer']
                                                  )
                bot.send_message(user_id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?\n'
                                          f'{answer}', reply_markup=send_msg_to_user)
            if request[2] == "S: wait_for_msg":
                client_id, message = parse_msg(msg)
                send_msg_to_user = one_button_keyboard("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                       f'send_msg:{client_id}:{message}')
                bot.send_message(user_id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?',
                                 reply_markup=send_msg_to_user)
            if request[2] == "S: wait_for_user_replenish":
                client_id, amount = msg.text.split(" ")
                replenish_user_balance = one_button_keyboard("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                             f'replenish_user_balance {client_id} {amount}')
                bot.send_message(user_id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n'
                                          f'{client_id} –Ω–∞ —Å—É–º–º—É {amount}?', reply_markup=replenish_user_balance)
            if request[2] == "S: wait_for_user_unreplenish":
                client_id, amount = msg.text.split(" ")
                unreplenish_user_balance = one_button_keyboard("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                               f'unreplenish_user_balance {client_id} {amount}')
                bot.send_message(user_id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
                                          f'{client_id} —Å—É–º–º—É {amount}?', reply_markup=unreplenish_user_balance)

            if request is not None:
                update_request_in_db(c, request)
            return True
        if help_request is not None:
            # help operations
            request = help_request
            if request[2] == 'H: wait_for_question':
                question = msg.text
                request[2] = 'H: user_wait_for_response'
                request[5] = question
                bot.send_message(user_id, text="‚è∞ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, –æ–∂–∏–¥–∞–π—Ç–µ!",
                                 reply_markup=CANCEL_HELP_RQ)
            if request is not None:
                update_request_in_db(c, request)

            if request is not None:
                update_request_in_db(c, request)
            return True
        if replenish_request is not None:
            request = replenish_request
            # balance operations
            if request[2] == "B: wait for replenish value":
                replenish_value = get_value(msg.text)

                if replenish_value_is_acceptable(replenish_value):
                    request[3] = f'replenish {replenish_value}'
                    request[5] = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É: {replenish_value} ‚ÇΩ"
                    update_request_in_db(c, request)
                    bot.send_message(user_id, text=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É: {replenish_value} ‚ÇΩ",
                                     reply_markup=REPLENISH_CONFIRM_KEYBOARD)

                else:
                    bot.send_message(user_id, text='–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            elif request[2] == "B: waiting_for_purchase":
                bot.send_message(user_id,
                                 text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!', reply_markup=PAYMENT_METHODS)
        if trade_request is not None:
            request = trade_request
            if request[2] == "T: wait for trade value":
                trade_value = get_value(msg.text)
                operation_type, key, curr_price = request[3].split(" ")
                if trade_value_is_acceptable(trade_value, key):
                    user_price, user_curr, promotion = get_user_price(curr_price, user, trade_value, key)
                    if promotion is not None:
                        bot.send_message(user_id, text=f'–≠—Ç–æ –≤–∞—à–∞ {user[6] + 1} –∑–∞—è–≤–∫–∞, –æ–Ω–∞ –±—É–¥–µ—Ç –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π!')

                    bot.send_message(user_id,
                                     text=f"–ü–æ–∫—É–ø–∫–∞ {trade_value} {key}\n"
                                          f"–ø–æ –∫—É—Ä—Å—É: {user_curr} —Ä—É–±.\n"
                                          f"–ö –æ–ø–ª–∞—Ç–µ: {user_price} —Ä—É–±.\n"
                                          f"–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫.",
                                     reply_markup=CANCEL_ORDER)
                    request[2] = 'T: waiting_for_usr_wallet'
                    request[5] = f"–ü–æ–∫—É–ø–∫–∞ {trade_value} {key}, –ö –æ–ø–ª–∞—Ç–µ: {user_price}"
                    request[3] = f'trade {trade_value} {key} {user_curr}'
                else:
                    bot.send_message(user_id, text='–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n')
            elif request[2] == "T: waiting_for_usr_wallet":
                user_wallet = msg.text
                if check_address(user_wallet):
                    bot.send_message(user_id,
                                     text=f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª–ª—é—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª—ë–∫:\n'
                                          f'{user_wallet}',
                                     reply_markup=WALLET_CONFIRM_KEYBOARD)
                    request[6] = user_wallet
                else:
                    bot.send_message(user_id,
                                     text=f'üôÖ‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            elif request[2] == "T: waiting_for_priority":
                bot.send_message(user_id,
                                 text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏!',
                                 reply_markup=REQUEST_PRIORITIES)
            elif request[2] == "T: waiting_for_purchase":
                bot.send_message(user_id,
                                 text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!', reply_markup=PAYMENT_METHODS)

            if request is not None:
                update_request_in_db(c, request)
            else:
                request = get_request_by_telegram_id(c, user_id, status='user_confirmed')
                if request is None:
                    request = get_request_by_telegram_id(c, user_id, rq_type='replenish', status='user_confirmed')
                    if request is None:
                        request = get_request_by_telegram_id(c, user_id, rq_type='replenish', status='user_payed')
                    if request is not None:
                        bot.send_message(user_id,
                                         text=f'‚è∞ –í–∞—à–∞ –∑–∞–≤—è–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {user_id}',
                                         reply_markup=SHOW_OR_CANCEL_REPLENISH_ORDER)


@bot.callback_query_handler(func=lambda call: True)
def buttons_stuff(call):
    c = sqlite3.connect('database.db')
    user_id = call.message.chat.id
    user = get_user_by_telegram_id(c, user_id)
    trade_request, help_request, replenish_request, service_request, return_request = get_requests(c, user_id)
    request = None
    print(trade_request, 'found (buttons_stuff) trade')
    print(help_request, 'found (buttons_stuff) help')
    print(replenish_request, 'found (buttons_stuff) replenish')
    print(service_request, 'found (buttons_stuff) service')
    print(return_request, 'found (buttons_stuff) return')
    print(call.data)

    if str(user_id) in OPERATORS or str(user_id) in ADMINS:
        if 'send_msg' in call.data:
            call_data, client_id, message = call.data.split(':')
            bot.send_message(client_id,
                             text=f'–í–∞–º –Ω–∞–ø–∏—Å–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message}')
            bot.send_message(user_id,
                             text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
            delete_request_from_db(c, service_request[0])
            return True
        elif 'send_status' in call.data:
            client_id, message = get_status_message(c, call)
            bot.send_message(user_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            bot.send_message(client_id, text=message)
            return True
        elif 'sendanswer' in call.data:
            call_data, client_id, answer = call.data.split(' ')
            request = get_request_by_telegram_id(c, client_id, rq_type='help_request')
            bot.send_message(int(client_id),
                             text=f'–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª–∏!\n–û—Ç–≤–µ—Ç: {answer}\n–í–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç')
            bot.send_message(user_id, text='–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç.')
            delete_request_from_db(c, request[0])
            delete_request_from_db(c, service_request[0])
            return True
        elif 'answer' in call.data:
            add_request_to_db(c, [user_id, 'S: wait_for_answer',
                                  f'service_request', str(datetime.now()), 'None', 'None'])
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
            return True
        elif 'cancel_question' in call.data:
            call_data, rq_id = call.data.split(" ")
            request = get_request_by_id(c, int(rq_id))
            if get_request_by_id(c, rq_id) is not None:
                delete_request_from_db(c, request_id=request[0])
                bot.send_message(chat_id=user_id,
                                 text='‚úÖ –í–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª—ë–Ω!')
            else:
                bot.send_message(chat_id=user_id,
                                 text="‚úÖ –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ —É–¥–∞–ª—ë–Ω")
            return True
        elif 'cancel ' in call.data:
            call_data, rq_id = call.data.split(" ")
            request = get_request_by_id(c, int(rq_id))
            if request is not None:
                send_msg_to_user = keyboard_maker(3, ['–û—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', '–í–æ–æ–±—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª –ø–ª–∞—Ç—ë–∂',
                                                      '–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É'],
                                                  [f'send_status {request[0]} {request[1]} not_enough',
                                                   f'send_status {request[0]} {request[1]} no_payment',
                                                   f'send_status {request[0]} {request[1]} close_request']
                                                  )
                bot.send_message(chat_id=user_id,
                                 text='‚úÖ –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:',
                                 reply_markup=send_msg_to_user)
            else:
                bot.send_message(chat_id=user_id,
                                 text="‚úÖ –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞!")
            return True
        elif 'confirm ' in call.data:
            call_data, rq_id = call.data.split(" ")
            print(rq_id)
            request = get_request_by_id(c, int(rq_id))
            raise_users_q_of_trades(c, request[1])
            if request is not None:
                send_msg_to_user = keyboard_maker(4, ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
                                                      '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É',
                                                      '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                                                      '–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É'],
                                                  [f'send_status {request[0]} {request[1]} payment_s',
                                                   f'send_status {request[0]} {request[1]} crypto_sent',
                                                   f'send_status {request[0]} {request[1]} replenish_s',
                                                   f'cancel {rq_id}']
                                                  )
                bot.send_message(chat_id=user_id,
                                 text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:',
                                 reply_markup=send_msg_to_user)
            else:
                bot.send_message(chat_id=user_id,
                                 text="‚úÖ –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞!")
            return True
        elif 'unreplenish_user_balance' in call.data:
            call_data, client_id, amount = call.data.split(" ")
            if user_in_db(c, client_id):
                if unreplenish_user_balance(c, client_id, amount):
                    bot.send_message(user_id,
                                     text='–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã')
                    bot.send_message(client_id,
                                     text=f'–° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–ª–∏ {amount}!')
                else:
                    bot.send_message(user_id,
                                     text='–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥')
                delete_request_from_db(c, request_id=service_request[0])
            else:
                bot.send_message(user_id,
                                 text='–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º')
            return True
        elif 'replenish_user_balance' in call.data:
            call_data, client_id, amount = call.data.split(" ")
            if user_in_db(c, client_id):
                replenish_user_balance(c, client_id, amount)
                bot.send_message(user_id,
                                 text='–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                bot.send_message(client_id,
                                 text=f'{amount} —Ä—É–±. –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å')
                delete_request_from_db(c, request_id=service_request[0])
            else:
                bot.send_message(user_id,
                                 text='–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º')
            return True
    # USER SECTION #####################################################################################################
    if call.data == 'none':
        markup = u_menu.get_start_menu_markup()
        bot.send_message(user_id, "‚¨áÔ∏è–ú–µ–Ω—é", reply_markup=markup)
    elif 'return_sber' in call.data:
        call_data, rq_id = call.data.split(" ")
        request = get_request_by_id(c, rq_id=rq_id)
        request[2] = "R: wait for return requisites"
        request[5] = "–°–±–µ—Ä–±–∞–Ω–∫"
        bot.send_message(text=f'–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!',
                         chat_id=user_id)
    elif 'return_qiwi' in call.data:
        call_data, rq_id = call.data.split(" ")
        request = get_request_by_id(c, rq_id=rq_id)
        request[2] = "R: wait for return requisites"
        request[5] = request[5] + " QIWI"
        bot.send_message(text=f'–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!',
                         chat_id=user_id)
    elif call.data == 'edit_requisites':
        return_request[2] = "R: wait for return requisites"
        bot.send_message(user_id,
                         text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
    elif call.data == 'requisites_correct':
        request = return_request
        return_amount = get_return_amount(request)
        user[2] = user[2] - return_amount
        request[2] = "user_payed"
        bot.edit_message_text(text='–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å! –ë–æ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –¥–µ–Ω—å–≥–∏',
                              chat_id=user_id, message_id=call.message.message_id)
        text = get_request_text(request) + '\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.'
        send_request_to_operators(text, request)
    elif call.data == 'return_money':
        request = return_request
        if request is not None:
            bot.send_message(chat_id=user_id,
                             text='–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, –∂–µ–ª–∞–µ—Ç–µ –µ—ë –æ—Ç–º–µ–Ω–∏—Ç—å?',
                             reply_markup=SHOW_OR_CANCEL_RETURN_ORDER)
        else:
            request = add_request_to_db(c, [user_id, "R: wait for return value",
                                            'return', str(datetime.now()), 'None', 'None'])
            balance_available_for_return = get_balance_available_for_return(user)
            bot.edit_message_text(text=f"–°—É–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞—è –Ω–∞ –≤—ã–≤–æ–¥: {balance_available_for_return}\n"
                                       f"üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏"
                                       f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_VALUE_FOR_RETURN}\n"
                                       f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MAX_VALUE_FOR_RETURN}\n',
                                  chat_id=user_id,
                                  message_id=call.message.message_id)
    elif call.data == 'return_confirmed':
        return_request[2] = 'user_confirmed'
        update_request_in_db(c, return_request)
        bot.edit_message_text(text=f'–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–≤—è–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: '
                                   f'{1000 + return_request[0]}',
                              chat_id=user_id,
                              message_id=call.message.message_id,
                              reply_markup=SHOW_OR_CANCEL_RETURN_ORDER)
        text = get_request_text(return_request) + '\n–ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞.'
        send_request_to_operators(text, return_request)

    elif call.data == 'show_help_request':
        request = get_request_by_telegram_id(c, user_id, rq_type='help', status='all')
        text = get_request_text(request)
        if text is not None:
            bot.send_message(user_id,
                             text=text,
                             reply_markup=CANCEL_HELP_RQ)
        else:
            bot.send_message(
                chat_id=user_id,
                text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :('
            )
    elif call.data == 'show_trade':
        request = get_request_by_telegram_id(c, user_id, rq_type='trade', status='all')
        text = get_request_text(request)
        if text is not None:
            bot.send_message(user_id,
                             text=text,
                             reply_markup=CANCEL_ORDER)
        else:
            bot.send_message(
                chat_id=user_id,
                text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :('
            )
    elif call.data == 'show_replenish':
        request = get_request_by_telegram_id(c, user_id, rq_type='replenish', status='all')
        text = get_request_text(request)
        if text is not None:
            bot.send_message(user_id,
                             text=text,
                             reply_markup=CANCEL_REPLENISH)
        else:
            bot.send_message(
                chat_id=user_id,
                text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :('
            )
    elif call.data == 'show_return':
        request = get_request_by_telegram_id(c, user_id, rq_type='return', status='all')
        text = get_request_text(request)
        if text is not None:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=CANCEL_RETURN
            )
        else:
            bot.send_message(
                chat_id=user_id,
                text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :('
            )

    elif call.data == 'cancel_trade':
        request = get_request_by_telegram_id(c, user_id, rq_type='trade', status='all')
        if request is not None:
            if request[2] == "user_confirmed" or request[2] == 'user_payed':
                bot.edit_message_text(
                    message_id=call.message.message_id,
                    chat_id=user_id,
                    text='–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–µ—Ä–µ–≤–µ–ª–∏ –¥–µ–Ω—å–≥–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, —Ç–æ –æ–Ω–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.'
                         '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?',
                    reply_markup=REPLENISH_INSTEAD_TRADE)
            else:

                delete_request_from_db(c, request_id=request[0])
                bot.send_message(chat_id=user_id,
                                 text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! ‚¨áÔ∏è –ú–µ–Ω—é',
                                 reply_markup=u_menu.get_start_menu_markup())
        else:
            bot.send_message(user_id,
                             text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')
    elif call.data == 'cancel_help_rq':
        request = get_request_by_telegram_id(c, user_id, rq_type='help', status='all')
        if request is not None:
            delete_request_from_db(c, request_id=request[0])
            bot.send_message(chat_id=user_id,
                             text='‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª—ë–Ω! ‚¨áÔ∏è –ú–µ–Ω—é',
                             reply_markup=u_menu.get_start_menu_markup())
        else:
            bot.send_message(user_id,
                             text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')
    elif call.data == 'cancel_return':
        request = get_request_by_telegram_id(c, user_id, rq_type='return', status='all')
        if request is not None:
            if request[2] == 'user_payed':
                bot.edit_message_text(
                    message_id=call.message.message_id,
                    chat_id=user_id,
                    text='–î–µ–Ω—å–≥–∏ —É–∂–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞! '
                         '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –∏—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.'
                         '–ï—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É, —Ç–æ –ø–ª–∞—Ç—ë–∂ –º–æ–∂–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è! –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?',
                    reply_markup=REPLENISH_INSTEAD_RETURN)
            else:

                delete_request_from_db(c, request_id=request[0])
                bot.send_message(chat_id=user_id,
                                 text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! ‚¨áÔ∏è –ú–µ–Ω—é',
                                 reply_markup=u_menu.get_start_menu_markup())
        else:
            bot.send_message(user_id,
                             text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')
    elif call.data == 'cancel_replenish':
        request = get_request_by_telegram_id(c, user_id, rq_type='replenish', status='all')
        if request is not None:
            if request[2] == 'user_confirmed':
                bot.edit_message_text(
                    message_id=call.message.message_id,
                    chat_id=user_id,
                    text='–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–µ—Ä–µ–≤–µ–ª–∏ –¥–µ–Ω—å–≥–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, —Ç–æ –æ–Ω–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.'
                         '–ï—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É, —Ç–æ –ø–ª–∞—Ç—ë–∂ –º–æ–∂–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è! –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?',
                    reply_markup=REPLENISH_INSTEAD_REPLENISH)
            else:

                delete_request_from_db(c, request_id=request[0])
                bot.send_message(chat_id=user_id,
                                 text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! ‚¨áÔ∏è –ú–µ–Ω—é',
                                 reply_markup=u_menu.get_start_menu_markup())
        else:
            bot.send_message(user_id,
                             text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')

    elif call.data == 'cancel_trade_anyway':
        request = get_request_by_telegram_id(c, user_id, rq_type='trade', status='all')
        if request is not None:
            delete_request_from_db(c, request_id=request[0])
            bot.send_message(chat_id=user_id,
                             text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! ‚¨áÔ∏è –ú–µ–Ω—é',
                             reply_markup=u_menu.get_start_menu_markup())
        else:
            bot.send_message(user_id,
                             text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')
    elif call.data == 'cancel_return_anyway':
        request = get_request_by_telegram_id(c, user_id, rq_type='return', status='all')
        if request is not None:
            delete_request_from_db(c, request_id=request[0])
            bot.send_message(chat_id=user_id,
                             text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! ‚¨áÔ∏è –ú–µ–Ω—é',
                             reply_markup=u_menu.get_start_menu_markup())
        else:
            bot.send_message(user_id,
                             text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')
    elif call.data == 'cancel_replenish_anyway':
        request = get_request_by_telegram_id(c, user_id, rq_type='replenish', status='all')
        if request is not None:
            delete_request_from_db(c, request_id=request[0])
            bot.send_message(chat_id=user_id,
                             text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! ‚¨áÔ∏è –ú–µ–Ω—é',
                             reply_markup=u_menu.get_start_menu_markup())
        else:
            bot.send_message(user_id,
                             text='–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')

    elif 'priority_usl' == call.data:
        request = trade_request
        request[2] = "T: waiting_for_purchase"
        request[5] = request[5] + ' –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—ã—á–Ω—ã–π'
        bot.edit_message_text(text='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ —Ç–æ–ª—å–∫–æ '
                                   '–±–æ—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.\n'
                                   '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!',
                              chat_id=user_id,
                              message_id=call.message.message_id,
                              reply_markup=PAYMENT_METHODS)
    elif 'priority_adv' == call.data:
        request = trade_request
        request[2] = "T: waiting_for_purchase"
        request[5] = change_request_comment_price(request, ADV_PRIORITY_PRICE)
        bot.edit_message_text(text='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ —Ç–æ–ª—å–∫–æ '
                                   '–±–æ—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.\n'
                                   '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!',
                              chat_id=user_id,
                              message_id=call.message.message_id,
                              reply_markup=PAYMENT_METHODS)
    elif 'priority_max' == call.data:
        request = trade_request
        request[2] = "T: waiting_for_purchase"
        request[5] = change_request_comment_price(request, MAX_PRIORITY_PRICE)
        bot.edit_message_text(text='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n'
                                   '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!',
                              chat_id=user_id,
                              message_id=call.message.message_id,
                              reply_markup=PAYMENT_METHODS)

    elif call.data == 'edit_wallet':
        request = trade_request
        request[2] = 'T: waiting_for_usr_wallet'
        bot.send_message(user_id,
                         text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
    elif call.data == 'wallet_correct':
        request = trade_request
        request[2] = "T: waiting for priority"
        bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏!', chat_id=user_id, message_id=call.message.message_id)
        bot.edit_message_reply_markup(user_id, message_id=call.message.message_id, reply_markup=REQUEST_PRIORITIES)

    elif call.data == 'replenish_confirmed':
        request = replenish_request
        request[2] = 'B: waiting_for_purchase'
        bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!', chat_id=user_id, message_id=call.message.message_id)
        bot.edit_message_reply_markup(user_id, message_id=call.message.message_id, reply_markup=REPLENISH_METHODS)
    elif call.data == 'replenish_balance':
        request = replenish_request
        if request is not None and request[2] != 'user_confirmed':
            delete_request_from_db(c, request[0])
            request = add_request_to_db(c, [user_id, "B: wait for replenish value",
                                            'replenish', str(datetime.now()), 'None', 'None'])
        if request is None:
            request = add_request_to_db(c, [user_id, "B: wait for replenish value",
                                            'replenish', str(datetime.now()), 'None', 'None'])
        bot.edit_message_text(text=f"üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å",
                              chat_id=user_id,
                              message_id=call.message.message_id)
    elif call.data == 'replenish_balance_nwmsg':
        request = trade_request
        if request is not None and request[2] != 'user_confirmed':
            delete_request_from_db(c, request[0])
        if request is None:
            request = add_request_to_db(c, [user_id, "B: wait for replenish value",
                                            'replenish', str(datetime.now()), 'None', 'None'])
        bot.send_message(text=f"üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å",
                         chat_id=user_id)
    elif call.data == 'replenish_instead':
        request = trade_request
        comment, user_price = request[5].split(': ')
        user_price = user_price.split(" –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ")[0]
        replenish_value = user_price
        request[5] = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É: {replenish_value}"
        request[2] = 'user_confirmed'
        request[3] = f'replenish {replenish_value}'
        bot.edit_message_text(
            message_id=call.message.message_id,
            chat_id=user_id,
            text=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É: {replenish_value} ‚ÇΩ\n"
                 f"–ù–µ –æ—Ç–º–µ–Ω—è–π—Ç–µ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å!\n"
                 f"(–í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è)\n"
                 f"–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞.",
            reply_markup=PURCHASE_CONFIRM_KEYBOARD)
    elif call.data == 'user_confirmed_blnc':
        request = trade_request
        comment, user_price = request[5].split(': ')
        user_price = user_price.split(" –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ")[0]
        user[2] = user[2] - float(user_price)
        update_user_in_db(c, user)
        request[2] = 'user_payed'
        bot.edit_message_text(text=f'–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–≤—è–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {1000 + request[0]}',
                              chat_id=user_id,
                              message_id=call.message.message_id,
                              reply_markup=SHOW_OR_CANCEL_TRADE_ORDER)
        text = get_request_text(request) + '\n–ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞.'
        send_request_to_operators(text, request)
    elif call.data == 'user_confirmed_payment':
        request = trade_request
        request[2] = 'user_confirmed'
        update_request_in_db(c, request)
        bot.edit_message_text(text=f'–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–≤—è–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: '
                                   f'{1000 + request[0]}',
                              chat_id=user_id,
                              message_id=call.message.message_id,
                              reply_markup=SHOW_OR_CANCEL_TRADE_ORDER)
        text = get_request_text(request)
        send_request_to_operators(text, request)
    elif call.data == 'pay_sber':
        request = trade_request
        request[3] = request[3] + " " + call.data
        bot.edit_message_text(text=f'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {SBER_REQUISITES}\n'
                                   f'–í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∂–∏—Ç–µ {user_id}\n'
                                   f'{request[5]}',
                              reply_markup=PURCHASE_CONFIRM_KEYBOARD,
                              chat_id=user_id,
                              message_id=call.message.message_id)
    elif call.data == 'pay_yandex':
        request = trade_request
        request[3] = request[3] + " " + call.data
        bot.edit_message_text(text=f'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {YANDEX_REQUISITES}\n'
                                   f'–í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∂–∏—Ç–µ {user_id}\n'
                                   f'{request[5]}',
                              reply_markup=PURCHASE_CONFIRM_KEYBOARD,
                              chat_id=user_id,
                              message_id=call.message.message_id)
    elif call.data == 'pay_advcash':
        request = trade_request
        request[3] = request[3] + " " + call.data
        bot.edit_message_text(text=f'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {ADVCASH_REQUISITES}\n'
                                   f'–í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∂–∏—Ç–µ {user_id}\n'
                                   f'{request[5]}',
                              reply_markup=PURCHASE_CONFIRM_KEYBOARD,
                              chat_id=user_id,
                              message_id=call.message.message_id)
    elif call.data == 'pay_balance':
        request = trade_request
        comment, user_price = request[5].split(': ')
        user_price = user_price.split(" –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ")[0]
        request[3] = request[3] + " " + call.data
        if user[2] > float(user_price):
            bot.edit_message_text(text=f'–î–µ–Ω—å–≥–∏ —Å–ø–∏—à—É—Ç—Å—è c –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ: {user[2]}\n',
                                  reply_markup=BALANCE_PAY_CONFIRM_KEYBOARD,
                                  chat_id=user_id,
                                  message_id=call.message.message_id)
        else:
            bot.edit_message_text(
                text=f'–ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n'
                     f'–í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]} —Ä—É–±.\n'
                     f'–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                reply_markup=REPLENISH_METHODS,
                chat_id=user_id,
                message_id=call.message.message_id
            )
    # USER SECTION #####################################################################################################
    if request is not None:
        update_request_in_db(c, request)


@bot.channel_post_handler(content_types=['text'])
def get_channel_id(msg):
    chat_id = msg.chat.id
    print(chat_id)


if __name__ == "__main__":
    try:
        bot.polling()
    except Exception as er:
        print(er)
        bot.send_message(231584958,
                         text=er)
